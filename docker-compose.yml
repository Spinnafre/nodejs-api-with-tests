version: '3'
services:
  database:
      image: postgis/postgis:15-3.3-alpine
      container_name: "database-container"
      command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
      # volumes:
      #   - ./data/postgresql:/var/lib/postgresql/data
        # -- Any script we put under scripts will be copied to the container and run when our database gets initialized
        #  - ./scripts:/docker-entrypoint-initdb.d 
      ports:
        - "127.0.0.1:5431:5432"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
        interval: 30s
        timeout: 60s
        retries: 5
        start_period: 80s  
      env_file:
        - database-env
      restart: always
      networks:
        - back-tier
      tmpfs: /var/lib/postgresql/data
        
  backend:
    build: 
      context: .
      target: development
    container_name: "api-container"
    restart: always
    environment:
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=8080
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:9222:9222"
    volumes:
      - .:/usr/src/app
      - backend_node_modules:/usr/src/app/node_modules
    depends_on:
      database:
        condition: service_healthy
    networks:
      - back-tier

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    depends_on:
      - database
    user: '$UID:$GID'
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASSWORD}
    ports:
      - "127.0.0.1:3333:80"
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    networks:
      - back-tier

volumes:
  backend_node_modules: {}

    
networks:
  back-tier:

